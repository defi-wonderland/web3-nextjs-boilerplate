
name: Build and Test

on:
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: "21.4"
          registry-url: "https://registry.npmjs.org"

      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "::set-output name=dir::$(pnpm cache dir)"

      - uses: actions/cache@v3
        id: pnpm-cache # use this to check for `cache-hit` (`steps.pnpm-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm.lock') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install project dependencies
        run: pnpm --prefer-offline
        id: install

      - name: Build project dependencies
        run: pnpm run build
        id: build

  check:
    name: Check for crypto
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check for crypto
        uses: defi-wonderland/check-crypto-action@v1
        with:
          title: Check private key and notify
          branch: dev
          only_notify: true
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "21.4"
          registry-url: "https://registry.npmjs.org"

      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "::set-output name=dir::$(pnpm cache dir)"

      - uses: actions/cache@v3
        id: pnpm-cache # use this to check for `cache-hit` (`steps.pnpm-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm.lock') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install project dependencies
        run: pnpm --prefer-offline
        id: install

      - name: Run Prettier
        run: pnpm prettier

      - name: Run Linter
        run: pnpm lint

      - name: Run Tests
        run: pnpm test
  
  e2e:
    name: Cypress E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: 'pnpm'

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Install project dependencies
        run: pnpm install --frozen-lockfile

      - name: Start Server
        run: pnpm run start:prod &
        env:
          PORT: 3000 

      - name: Sleep for 30s
        run: sleep 30

      - name: Cypress E2E Tests
        uses: cypress-io/github-action@v2
        with:
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 60 
